apiVersion: batch/v1
kind: CronJob
metadata:
  name: github-polling-job
  namespace: argo-events
spec:
  schedule: "* * * * *"  # Poll every minute
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: poller
            image: leonrahul/curl-jq:latest
            imagePullPolicy: Always
            command:
            - /bin/sh
            - -c
            - |
              #!/bin/sh

              set -e # Exit immediately if a command exits with a non-zero status

              echo "Fetching latest commit from GitHub (Commits API)..."

              # Fetch the latest commit from the master branch using the Commits API
              COMMIT_RESPONSE=$(curl -s -H "Authorization: token $(cat /etc/github-token/github-token)" \
                                     -H "Accept: application/vnd.github.v3+json" \
                                     "https://api.github.com/repos/anandrahul23/vriddhi-app-leonrahul/commits/master")

              # Check for rate limiting
              if echo "$COMMIT_RESPONSE" | jq -e '.message | contains("API rate limit exceeded")' > /dev/null; then
                echo "Rate limit exceeded. Exiting."
                exit 1
              fi

              # Check for errors in the response (e.g., 404 Not Found)
              if echo "$COMMIT_RESPONSE" | jq -e '.message' > /dev/null; then
                echo "Error fetching commit: $(echo "$COMMIT_RESPONSE" | jq -r '.message')"
                exit 1
              fi

              # Log the full response
              echo "GitHub Commits Response:"
              echo "$COMMIT_RESPONSE"

              # Extract the latest commit ID
              LATEST_COMMIT=$(echo "$COMMIT_RESPONSE" | jq -r '.sha')
              echo "Latest Commit ID: $LATEST_COMMIT"

              # Check if the commit ID has changed
              echo "Checking for changes in the commit ID..."
              PREVIOUS_COMMIT=$(cat /data/previous_commit 2>/dev/null || echo "")
              echo "Previous Commit ID: $PREVIOUS_COMMIT"

              if [ "$LATEST_COMMIT" != "$PREVIOUS_COMMIT" ]; then
                echo "New commit detected. Publishing the event to the webhook..."
                # Create a dummy event for the webhook
                EVENT=$(echo "{\"commit_id\": \"$LATEST_COMMIT\"}")
                echo "$EVENT" | curl -s -X POST -H "Content-Type: application/json" -d @- \
                                      http://user-service-webhook-eventsource-svc.argo-events.svc.cluster.local:12000/github
                echo "Event published successfully."

                # Save the latest commit ID for future comparisons
                echo "$LATEST_COMMIT" > /data/previous_commit
              else
                echo "No new commits detected. Skipping publishing."
              fi

              # Log completion
              echo "Job completed. Exiting."
            volumeMounts:
            - name: github-token
              mountPath: /etc/github-token
              readOnly: true
            - name: commit-data
              mountPath: /data
          restartPolicy: Never  # Ensure the pod does not restart
          volumes:
          - name: github-token
            secret:
              secretName: github-token-sec
          - name: commit-data
            persistentVolumeClaim:
              claimName: github-commit-pvc
      backoffLimit: 0  # Ensure resources are cleaned up after the job completes

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: github-commit-pvc
  namespace: argo-events
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi
